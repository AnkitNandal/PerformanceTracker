// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

@interface NSFileManager (SWIFT_EXTENSION(KPerformanceLogger))
@end


/// This class will be responsible for all the configutration related to Performance Logger.
SWIFT_CLASS("_TtC18KPerformanceLogger21KPLoggerConfiguration")
@interface KPLoggerConfiguration : NSObject
/// Shared instance of Performance Logger Configurations.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) KPLoggerConfiguration * _Nonnull shared;)
+ (KPLoggerConfiguration * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)setShared:(KPLoggerConfiguration * _Nonnull)value;
/// Provide a time in seconds after which any unfinished log will automatically be closed.
/// Defaults is 30 seconds.
@property (nonatomic) NSTimeInterval autoCloserTime;
/// Whether to track all logs or not. If true Performance Logger will track all the logs else it will come in disabled state.
@property (nonatomic) BOOL enable;
/// A value that will determine after how much log records should it flush report to persistance storage.
@property (nonatomic) NSUInteger fulshCount;
/// An array of files where all the log reports have been saved.
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable logsPath;
/// Any specific information that you want to provide like hostname you are referring to, environment you are using ,etc.
@property (nonatomic, copy) NSString * _Nullable info;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
/// It is used to configure default Performance Logger configurations. For any custom configurations refer ‘configLogGeneration’
/// \param enable A configuration item which will tell whether Performance Logger should track all the logs. If its true all the logs will be tracked, if false all the logs will stop tracking and Performance Logger will come into dormant state unless its true.
///
/// \param flushCount A count which will decide when all the finished logs reports should be saved to persistant storage.By defaults the flush count is 100.
///
+ (void)useDefaultConfiguration;
/// Create your own custom benchmark by providing required information.
/// <ul>
///   <li>
///     Parameters:
///   </li>
///   <li>
///     type: Name of the custom bench mark. It shoud not be one of the primitive ttypes that are declared already.
///   </li>
///   <li>
///     benchmarkTime: A time which will be considered whether  a feature passed its respective benchmarking.
///   </li>
///   <li>
///     dataSize: Its an optional field which should be provided if the custom benchmarking will be calculated in the basis of data size as  well.
///   </li>
/// </ul>
+ (void)setCustomBenchmarkWithType:(NSString * _Nonnull)name benchmarkTime:(double)time dataSize:(double)size;
/// It is used if you want to provide any custom report generation information to manage howthe log will be generated
/// \param enable A configuration item which will tell whether Performance Logger should track all the logs. If its true all the logs will be tracked, if false all the logs will stop tracking and Performance Logger will come into dormant state unless its true.
///
/// \param flushCount A count which will decide when all the finished logs reports should be saved to persistant storage.
///
/// \param fileName Name of the custom bench mark. It shoud not be one of the primitive ttypes that are declared already.
///
/// \param directoryPath A time which will be considered whether  a feature passed its respective benchmarking.
///
/// \param maximumFileSizeInBytes Its an optional field which should be provided if the custom benchmarking will be calculated in the basis of data size as  well.
///
/// \param rollingFrequency Its an optional field which should be provided if the custom benchmarking will be calculated in the basis of data size as  well.
///
/// \param maximumFileSizeInBytes Its an optional field which should be provided if the custom benchmarking will be calculated in the basis of data size as  well.
///
+ (void)customLogGenerationConfigurations:(BOOL)enable flushCount:(NSUInteger)flushCount fileName:(NSString * _Nullable)name directoryPath:(NSString * _Nullable)path maximumFileSizeInBytes:(uint64_t)size rollingFrequency:(NSTimeInterval)frequency;
@end


SWIFT_CLASS("_TtC18KPerformanceLogger25KPerformanceLoggerManager")
@interface KPerformanceLoggerManager : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) KPerformanceLoggerManager * _Nonnull shared;)
+ (KPerformanceLoggerManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
+ (void)setShared:(KPerformanceLoggerManager * _Nonnull)value;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


@interface KPerformanceLoggerManager (SWIFT_EXTENSION(KPerformanceLogger))
@end


@interface KPerformanceLoggerManager (SWIFT_EXTENSION(KPerformanceLogger))
@end


@interface KPerformanceLoggerManager (SWIFT_EXTENSION(KPerformanceLogger))
/// Call this method if to generate a unique transactio id that must be assigned to a feature and will be passes across its sub features.
/// \param identifier Pass any identifier. It should be the name of the feature whose time we wnat to track.
///
///
/// returns:
/// Return a unique transaction Id.
+ (NSString * _Nullable)getLoggerTransactionIdentifierOf:(NSString * _Nonnull)identifier SWIFT_WARN_UNUSED_RESULT;
@end


@interface KPerformanceLoggerManager (SWIFT_EXTENSION(KPerformanceLogger))
@end


@interface KPerformanceLoggerManager (SWIFT_EXTENSION(KPerformanceLogger))
/// It is used when you want to print log report on console.
/// \param id If provided, log report of a particular transaction id will be printed else all finished logs will be printed.
///
+ (void)consoleLogReports:(NSString * _Nullable)id;
/// Call this method whenever you want to flush all finished log report to disk.
+ (void)flushLogReport;
@end


@interface KPerformanceLoggerManager (SWIFT_EXTENSION(KPerformanceLogger))
/// Start tracking for a UI rendering task.
/// \param transactionId Transaction id to be used for tracking events of a feature. It’s an id which will be               unique across all the primitive types which will be tacked across a particular feature.
///
/// \param subType Any subtype apart from main primitive type. It is generally used if there are more than one primitive task that fall under same feature. For example, if there are more that one UI rendering tasks under one feature. In that case we must provide unique value for each UI subtype.
///
/// \param comment Any comments that are to be attached for a particular type.
///
/// \param fileName The file name to print. The default is the file where <code>startUI</code> is called.
///
/// \param lineNumber The line number to print. The default is the line number where <code>startUI</code>
///
/// \param functionName The line number to print. The default is name of the function from where <code>startUI</code>
/// is called.
///
+ (void)startUIWithTransactionId:(NSString * _Nullable)id subType:(NSString * _Nullable)type comment:(NSString * _Nullable)comment fileName:(NSString * _Nonnull)fileName lineNumber:(NSUInteger)lineNumber functionName:(NSString * _Nonnull)functionName;
/// Call this method whenever you want to stop tracking an ongoing UI task.
/// \param transactionId Transaction id to be used for tracking events of a feature. It’s an id which will be               unique across all the primitive types which will be tacked across a particular feature.
///
/// \param subType Any subtype apart from main primitive type. It is generally used if there are more than one primitive task that fall under same feature. For example, if there are more that one UI rendering tasks under one feature. In that case we must provide unique value for each UI subtype.
///
+ (void)stopUIWithTransactionId:(NSString * _Nullable)id subType:(NSString * _Nullable)uiSubtype;
/// Start tracking for a Network task.
/// \param transactionId Transaction id to be used for tracking events of a feature. It’s an id which will be               unique across all the primitive types which will be tacked across a particular feature.
///
/// \param subType Any subtype apart from main primitive type. It is generally used if there are more than one primitive task that fall under same feature. For example, if there are more that one UI rendering tasks under one feature. In that case we must provide unique value for each UI subtype.
///
/// \param comment Any comments that are to be attached for a particular type.
///
/// \param fileName The file name to print. The default is the file where <code>startUI</code> is called.
///
/// \param lineNumber The line number to print. The default is the line number where <code>startUI</code>
///
/// \param functionName The line number to print. The default is name of the function from where <code>startUI</code>
/// is called.
///
+ (void)startNetworkWithTransactionId:(NSString * _Nullable)id subType:(NSString * _Nullable)type comment:(NSString * _Nullable)comment fileName:(NSString * _Nonnull)fileName lineNumber:(NSUInteger)lineNumber functionName:(NSString * _Nonnull)functionName;
/// Call this method whenever you want to stop tracking an ongoing n/w task.
/// \param transactionId Transaction id to be used for tracking events of a feature. It’s an id which will be               unique across all the primitive types which will be tacked across a particular feature.
///
/// \param subType Any subtype apart from main primitive type. It is generally used if there are more than one primitive task that fall under same feature. For example, if there are more that one UI rendering tasks under one feature. In that case we must provide unique value for each UI subtype.
///
+ (void)stopNetworkWithTransactionId:(NSString * _Nullable)id subType:(NSString * _Nullable)requestSubType;
/// Start tracking for a Network response Parsing task.
/// \param transactionId Transaction id to be used for tracking events of a feature. It’s an id which will be               unique across all the primitive types which will be tacked across a particular feature.
///
/// \param subType Any subtype apart from main primitive type. It is generally used if there are more than one primitive task that fall under same feature. For example, if there are more that one UI rendering tasks under one feature. In that case we must provide unique value for each UI subtype.
///
/// \param size Size of received data in bytes.
///
/// \param comment Any comments that are to be attached for a particular type.
///
/// \param fileName The file name to print. The default is the file where <code>startUI</code> is called.
///
/// \param lineNumber The line number to print. The default is the line number where <code>startUI</code>
///
/// \param functionName The line number to print. The default is name of the function from where <code>startUI</code>
/// is called.
///
+ (void)startParsingWithTransactionId:(NSString * _Nullable)id subType:(NSString * _Nullable)type size:(NSString * _Nullable)size comment:(NSString * _Nullable)comment fileName:(NSString * _Nonnull)fileName lineNumber:(NSUInteger)lineNumber functionName:(NSString * _Nonnull)functionName;
/// Call this method whenever you want to stop tracking an ongoing network response Parsing task.
/// \param transactionId Transaction id to be used for tracking events of a feature. It’s an id which will be               unique across all the primitive types which will be tacked across a particular feature.
///
/// \param subType Any subtype apart from main primitive type. It is generally used if there are more than one primitive task that fall under same feature. For example, if there are more that one UI rendering tasks under one feature. In that case we must provide unique value for each UI subtype.
///
+ (void)stopParsingWithTransactionId:(NSString * _Nullable)id subType:(NSString * _Nullable)requestSubType;
/// Start tracking for a CoreData task.
/// \param transactionId Transaction id to be used for tracking events of a feature. It’s an id which will be               unique across all the primitive types which will be tacked across a particular feature.
///
/// \param subType Any subtype apart from main primitive type. It is generally used if there are more than one primitive task that fall under same feature. For example, if there are more that one UI rendering tasks under one feature. In that case we must provide unique value for each UI subtype.
///
/// \param comment Any comments that are to be attached for a particular type.
///
/// \param fileName The file name to print. The default is the file where <code>startUI</code> is called.
///
/// \param lineNumber The line number to print. The default is the line number where <code>startUI</code>
///
/// \param functionName The line number to print. The default is name of the function from where <code>startUI</code>
/// is called.
///
+ (void)startCoreDataWithTransactionId:(NSString * _Nullable)id subType:(NSString * _Nullable)type comment:(NSString * _Nullable)comment fileName:(NSString * _Nonnull)fileName lineNumber:(NSUInteger)lineNumber functionName:(NSString * _Nonnull)functionName;
/// Call this method whenever you want to stop tracking an ongoing CoreData task.
/// \param transactionId Transaction id to be used for tracking events of a feature. It’s an id which will be               unique across all the primitive types which will be tacked across a particular feature.
///
/// \param subType Any subtype apart from main primitive type. It is generally used if there are more than one primitive task that fall under same feature. For example, if there are more that one UI rendering tasks under one feature. In that case we must provide unique value for each UI subtype.
///
+ (void)stopCoreDataWithTransactionId:(NSString * _Nullable)id subType:(NSString * _Nullable)requestSubType;
/// Start tracking any custom action that is not available primitively. Here we can start tracking any custom task that we wnat to. For example , there may be a View Model creator task that we are doiung before populating data. So in this case we must pass a custom type along with transaction Id.
/// \param transactionId Transaction id to be used for tracking events of a feature. It’s an id which will be               unique across all the primitive types which will be tacked across a particular feature.
///
/// \param type Any custom subtype apart from main primitive type. It shoud be unique to clearly mention specific custom task.
///
/// \param comment Any comments that are to be attached for a particular type.
///
/// \param fileName The file name to print. The default is the file where <code>startUI</code> is called.
///
/// \param lineNumber The line number to print. The default is the line number where <code>startUI</code>
///
/// \param functionName The line number to print. The default is name of the function from where <code>startUI</code>
/// is called.
///
+ (void)startCustomActionWithTransactionId:(NSString * _Nullable)id type:(NSString * _Nonnull)customType comment:(NSString * _Nullable)comment fileName:(NSString * _Nonnull)fileName lineNumber:(NSUInteger)lineNumber functionName:(NSString * _Nonnull)functionName;
/// Call this method whenever you want to stop tracking an ongoing custom task.
/// \param transactionId Transaction id to be used for tracking events of a feature. It’s an id which will be               unique across all the primitive types which will be tacked across a particular feature.
///
/// \param type Any custom subtype apart from main primitive type. It shoud be unique to clearly mention specific custom task.
///
+ (void)stopCustomActionWithTransactionId:(NSString * _Nullable)id type:(NSString * _Nonnull)customType;
/// Call this method when you dont’t want a log to be auto closed. This method must be called upfront after start tracking any log so that that particlar log should wait for manual closer. However if you call this method , you must call <em>stopTracking</em> so that that log will be closed.
/// \param transactionId Transaction id against which you want to disable autocloser.
///
+ (void)makeLogWaitForCloserWithTransactionId:(NSString * _Nullable)id;
/// Call this method when you want a log to be closed. This method is complementary to <em>makeLogWaitForCloser</em>. It should be called only when <em>makeLogWaitForCloser</em> is called upfront.
/// \param transactionId Transaction id against which you want to close logging.
///
+ (void)stopTrackingWithTransactionId:(NSString * _Nullable)id;
@end


@interface NSObject (SWIFT_EXTENSION(KPerformanceLogger))
/// Transaction id is used for tracking events of a feature. It’s an id which will be unique across all the primitive types which will be tacked across a particular feature. It will remian same for a particular instance of a feature and must be passed to other instances which are instantiated as a part of main fetaure.
@property (nonatomic, copy) NSString * _Nullable kpLoggerTransactionId;
/// A sub transaction id apart from main transaction id. It is generally created and used if there are more than one primitive task that fall under same feature. For example, if there are more that one Network tasks or Network calls are triggered multiple times under a same fetaure. In that case we must provide unique value for each network calls.
@property (nonatomic, copy) NSString * _Nullable kploggerCustomTransactionId;
/// Any commant that we want to attach to any instance.
@property (nonatomic, copy) NSString * _Nullable kploggerComments;
@end

#pragma clang diagnostic pop
